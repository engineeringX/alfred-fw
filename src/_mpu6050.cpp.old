#define MPU6050_DEV_ADDR (0x68)
#define MPU6050_REG_SAMPLE_RATE_DIVIDER (0x19)
#define MPU6050_REG_CONFIG (0x1A)
#define MPU6050_REG_ACCEL_CONFIG (0x1C)
#define MPU6050_REG_GYRO_CONFIG (0x1B)
#define MPU6050_REG_FIFO_EN (0x23)
#define MPU6050_REG_ACCEL_X_HI (0x3B) 
#define MPU6050_REG_ACCEL_X_LO (0x3C)
#define MPU6050_REG_ACCEL_Y_HI (0x3D)
#define MPU6050_REG_ACCEL_Y_LO (0x3E)
#define MPU6050_REG_ACCEL_Z_HI (0x3F)
#define MPU6050_REG_ACCEL_Z_LO (0x40)
#define MPU6050_REG_GYRO_X_HI (0x43) 
#define MPU6050_REG_GYRO_X_LO (0x44)
#define MPU6050_REG_GYRO_Y_HI (0x45)
#define MPU6050_REG_GYRO_Y_LO (0x46)
#define MPU6050_REG_GYRO_Z_HI (0x47)
#define MPU6050_REG_GYRO_Z_LO (0x48)
#define MPU6050_REG_USER_CTRL (0x6A)
#define MPU6050_REG_PWRMGMT_01 (0x6B)
#define MPU6050_REG_FIFO_COUNT_H (0x72)
#define MPU6050_REG_FIFO_COUNT_L (0x73)
#define MPU6050_REG_FIFO_RW (0x74)
#define MPU6050_REG_WHO_AM_I (0x75)

#define MPU6050_ACCEL_FS_2_LSB (16384.0f)
#define MPU6050_GYRO_FS_250_LSB (131.0f)

#include "Arduino.h"
#include "Wire.h"
#include "_mpu6050.h"

void read_bytes(uint8_t dev_addr, uint8_t reg_addr, uint8_t length, uint8_t* data) {
  Wire.beginTransmission(dev_addr);
  Wire.write(reg_addr);
  Wire.endTransmission();

  Wire.beginTransmission(dev_addr);
  Wire.requestFrom(dev_addr, length);
  for(uint8_t i = 0; i < length; i++) {
    data[i] = Wire.read();
  }
  Wire.endTransmission();
}

uint8_t read_byte(uint8_t dev_addr, uint8_t reg_addr) 
{
  uint8_t data;
  read_bytes(dev_addr, reg_addr, 1, &data);
  return data;
}

void write_bytes(uint8_t dev_addr, uint8_t reg_addr, uint8_t length, uint8_t* data) 
{
  Wire.beginTransmission(dev_addr);
  Wire.write(reg_addr);
  for(uint8_t i = 0; i < length; i++) 
  {
    Wire.write(data[i]);
  }
  Wire.endTransmission();
}

void write_byte(uint8_t dev_addr, uint8_t reg_addr, uint8_t data) 
{
  write_bytes(dev_addr, reg_addr, 1, &data);
}

void mpu6050_set_sleep_enable(bool sleep) 
{
  uint8_t data = read_byte(MPU6050_DEV_ADDR, MPU6050_REG_PWRMGMT_01);
  data = ((uint8_t)sleep << 6) | (data & ~(1 << 6));
  write_byte(MPU6050_DEV_ADDR, MPU6050_REG_PWRMGMT_01, data);
}

void mpu6050_set_sample_rate(uint8_t sample_rate)
{
  uint8_t gyroscope_fs = read_byte(MPU6050_DEV_ADDR, MPU6050_REG_CONFIG) & 0x7;
  gyroscope_fs = (gyroscope_fs == 0 || gyroscope_fs == 7) ? 8000 : 1000;
  uint8_t samplerate_div = (gyroscope_fs / sample_rate) - 1;
  Serial.print("sample rate divider: "); Serial.println(samplerate_div);
  write_byte(MPU6050_DEV_ADDR, MPU6050_REG_SAMPLE_RATE_DIVIDER, samplerate_div);
}

void mpu6050_init()
{
  // Disable the temperature sensor (bit 3) and use the gyroscope's x clk as the clk source (bit[2:0])
  uint8_t pwrmgmt = read_byte(MPU6050_DEV_ADDR, MPU6050_REG_PWRMGMT_01);
  write_byte(MPU6050_DEV_ADDR, MPU6050_REG_PWRMGMT_01, (pwrmgmt & ~(0xf)) | 0x09);

  // Set the accelerometer's full scale range to +-2g, the most sensitive setting
  uint8_t config = read_byte(MPU6050_DEV_ADDR, MPU6050_REG_ACCEL_CONFIG);
  write_byte(MPU6050_DEV_ADDR, MPU6050_REG_ACCEL_CONFIG, config & ~(0x3 << 3));

  // Set the gyroscope's full scale range to +-250 deg/s, the most sensitive setting
  config = read_byte(MPU6050_DEV_ADDR, MPU6050_REG_GYRO_CONFIG);
  write_byte(MPU6050_DEV_ADDR, MPU6050_REG_GYRO_CONFIG, config & ~(0x3 << 3));

  // Set the DLPF setting to cutoff at 10 Hz
  config = read_byte(MPU6050_DEV_ADDR, MPU6050_REG_CONFIG);
  write_byte(MPU6050_DEV_ADDR, MPU6050_REG_CONFIG, (config & ~(0x7)) | 0x5);
  
  // Enable writing into the FIFO for accel and gyro
  config = read_byte(MPU6050_DEV_ADDR, MPU6050_REG_FIFO_EN);
  write_byte(MPU6050_DEV_ADDR, MPU6050_REG_FIFO_EN, (config | (0xf << 3)));
 
  // Enable the FIFO 
  config = read_byte(MPU6050_DEV_ADDR, MPU6050_REG_USER_CTRL);
  write_byte(MPU6050_DEV_ADDR, MPU6050_REG_USER_CTRL, config | (1 << 6));
}

Triple<int16_t, int16_t, int16_t> mpu6050_read_accel()
{
  int16_t x_accel = read_byte(MPU6050_DEV_ADDR, MPU6050_REG_ACCEL_X_HI);
  x_accel = (x_accel << 8) | read_byte(MPU6050_DEV_ADDR, MPU6050_REG_ACCEL_X_LO);

  int16_t y_accel = read_byte(MPU6050_DEV_ADDR, MPU6050_REG_ACCEL_Y_HI);
  y_accel = (y_accel << 8) | read_byte(MPU6050_DEV_ADDR, MPU6050_REG_ACCEL_Y_LO);

  int16_t z_accel = read_byte(MPU6050_DEV_ADDR, MPU6050_REG_ACCEL_Z_HI);
  z_accel = (z_accel << 8) | read_byte(MPU6050_DEV_ADDR, MPU6050_REG_ACCEL_Z_LO);

  return Triple<int16_t, int16_t, int16_t>(x_accel, y_accel, z_accel);
}

Triple<int16_t, int16_t, int16_t> mpu6050_read_gyro()
{
  int16_t x_gyro = read_byte(MPU6050_DEV_ADDR, MPU6050_REG_GYRO_X_HI);
  x_gyro = (x_gyro << 8) | read_byte(MPU6050_DEV_ADDR, MPU6050_REG_GYRO_X_LO);

  int16_t y_gyro = read_byte(MPU6050_DEV_ADDR, MPU6050_REG_GYRO_Y_HI);
  y_gyro = (y_gyro << 8) | read_byte(MPU6050_DEV_ADDR, MPU6050_REG_GYRO_Y_LO);

  int16_t z_gyro = read_byte(MPU6050_DEV_ADDR, MPU6050_REG_GYRO_Z_HI);
  z_gyro = (z_gyro << 8) | read_byte(MPU6050_DEV_ADDR, MPU6050_REG_GYRO_Z_LO);

  return Triple<int16_t, int16_t, int16_t>(x_gyro, y_gyro, z_gyro);
}

uint16_t mpu6050_read_fifo(uint8_t num, int8_t* data)
{
  uint16_t count = read_byte(MPU6050_DEV_ADDR, MPU6050_REG_FIFO_COUNT_H);
  count = (count << 8) | read_byte(MPU6050_DEV_ADDR, MPU6050_REG_FIFO_COUNT_L);

  if(count > 0)
  {
    for(uint8_t i = 0; i < num; i++)
    {
      data[i] = read_byte(MPU6050_DEV_ADDR, MPU6050_REG_FIFO_RW);
    }
  }

  return count;
}

void mpu6050_reset_fifo()
{
  uint8_t config = read_byte(MPU6050_DEV_ADDR, MPU6050_REG_USER_CTRL);
  write_byte(MPU6050_DEV_ADDR, MPU6050_REG_USER_CTRL, (config | (1 << 2)));
}

